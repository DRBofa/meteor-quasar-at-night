{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar/client/page/ListItem.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar/client/page/ListItem.vue","filename":"/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar/client/page/ListItem.vue","passPerPreset":false,"envName":"development","cwd":"/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar","root":"/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar","generatorOpts":{"filename":"/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar/client/page/ListItem.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar/client/page/ListItem.vue"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.exportDefault({\n  data: function () {\n    return {\n      loading: false,\n      filter: \"\",\n      rowCount: 10,\n      columns: [{\n        name: \"desc\",\n        required: true,\n        label: \"Dessert (100g serving)\",\n        align: \"left\",\n        field: function (row) {\n          return row.name;\n        },\n        format: function (val) {\n          return \"\" + val;\n        },\n        sortable: true\n      }, {\n        name: \"calories\",\n        align: \"center\",\n        label: \"Calories\",\n        field: \"calories\",\n        sortable: true\n      }, {\n        name: \"fat\",\n        label: \"Fat (g)\",\n        field: \"fat\",\n        sortable: true\n      }, {\n        name: \"carbs\",\n        label: \"Carbs (g)\",\n        field: \"carbs\"\n      }, {\n        name: \"protein\",\n        label: \"Protein (g)\",\n        field: \"protein\"\n      }, {\n        name: \"sodium\",\n        label: \"Sodium (mg)\",\n        field: \"sodium\"\n      }, {\n        name: \"calcium\",\n        label: \"Calcium (%)\",\n        field: \"calcium\",\n        sortable: true,\n        sort: function (a, b) {\n          return parseInt(a, 10) - parseInt(b, 10);\n        }\n      }, {\n        name: \"iron\",\n        label: \"Iron (%)\",\n        field: \"iron\",\n        sortable: true,\n        sort: function (a, b) {\n          return parseInt(a, 10) - parseInt(b, 10);\n        }\n      }],\n      data: [{\n        id: 1,\n        name: \"Frozen Yogurt\",\n        calories: 159,\n        fat: 6.0,\n        carbs: 24,\n        protein: 4.0,\n        sodium: 87,\n        calcium: \"14%\",\n        iron: \"1%\"\n      }, {\n        id: 2,\n        name: \"Ice cream sandwich\",\n        calories: 237,\n        fat: 9.0,\n        carbs: 37,\n        protein: 4.3,\n        sodium: 129,\n        calcium: \"8%\",\n        iron: \"1%\"\n      }, {\n        id: 3,\n        name: \"Eclair\",\n        calories: 262,\n        fat: 16.0,\n        carbs: 23,\n        protein: 6.0,\n        sodium: 337,\n        calcium: \"6%\",\n        iron: \"7%\"\n      }, {\n        id: 4,\n        name: \"Cupcake\",\n        calories: 305,\n        fat: 3.7,\n        carbs: 67,\n        protein: 4.3,\n        sodium: 413,\n        calcium: \"3%\",\n        iron: \"8%\"\n      }, {\n        id: 5,\n        name: \"Gingerbread\",\n        calories: 356,\n        fat: 16.0,\n        carbs: 49,\n        protein: 3.9,\n        sodium: 327,\n        calcium: \"7%\",\n        iron: \"16%\"\n      }, {\n        id: 6,\n        name: \"Jelly bean\",\n        calories: 375,\n        fat: 0.0,\n        carbs: 94,\n        protein: 0.0,\n        sodium: 50,\n        calcium: \"0%\",\n        iron: \"0%\"\n      }, {\n        id: 7,\n        name: \"Lollipop\",\n        calories: 392,\n        fat: 0.2,\n        carbs: 98,\n        protein: 0,\n        sodium: 38,\n        calcium: \"0%\",\n        iron: \"2%\"\n      }, {\n        id: 8,\n        name: \"Honeycomb\",\n        calories: 408,\n        fat: 3.2,\n        carbs: 87,\n        protein: 6.5,\n        sodium: 562,\n        calcium: \"0%\",\n        iron: \"45%\"\n      }, {\n        id: 9,\n        name: \"Donut\",\n        calories: 452,\n        fat: 25.0,\n        carbs: 51,\n        protein: 4.9,\n        sodium: 326,\n        calcium: \"2%\",\n        iron: \"22%\"\n      }, {\n        id: 10,\n        name: \"KitKat\",\n        calories: 518,\n        fat: 26.0,\n        carbs: 65,\n        protein: 7,\n        sodium: 54,\n        calcium: \"12%\",\n        iron: \"6%\"\n      }],\n      original: [{\n        name: \"Frozen Yogurt\",\n        calories: 159,\n        fat: 6.0,\n        carbs: 24,\n        protein: 4.0,\n        sodium: 87,\n        calcium: \"14%\",\n        iron: \"1%\"\n      }, {\n        name: \"Ice cream sandwich\",\n        calories: 237,\n        fat: 9.0,\n        carbs: 37,\n        protein: 4.3,\n        sodium: 129,\n        calcium: \"8%\",\n        iron: \"1%\"\n      }, {\n        name: \"Eclair\",\n        calories: 262,\n        fat: 16.0,\n        carbs: 23,\n        protein: 6.0,\n        sodium: 337,\n        calcium: \"6%\",\n        iron: \"7%\"\n      }, {\n        name: \"Cupcake\",\n        calories: 305,\n        fat: 3.7,\n        carbs: 67,\n        protein: 4.3,\n        sodium: 413,\n        calcium: \"3%\",\n        iron: \"8%\"\n      }, {\n        name: \"Gingerbread\",\n        calories: 356,\n        fat: 16.0,\n        carbs: 49,\n        protein: 3.9,\n        sodium: 327,\n        calcium: \"7%\",\n        iron: \"16%\"\n      }, {\n        name: \"Jelly bean\",\n        calories: 375,\n        fat: 0.0,\n        carbs: 94,\n        protein: 0.0,\n        sodium: 50,\n        calcium: \"0%\",\n        iron: \"0%\"\n      }, {\n        name: \"Lollipop\",\n        calories: 392,\n        fat: 0.2,\n        carbs: 98,\n        protein: 0,\n        sodium: 38,\n        calcium: \"0%\",\n        iron: \"2%\"\n      }, {\n        name: \"Honeycomb\",\n        calories: 408,\n        fat: 3.2,\n        carbs: 87,\n        protein: 6.5,\n        sodium: 562,\n        calcium: \"0%\",\n        iron: \"45%\"\n      }, {\n        name: \"Donut\",\n        calories: 452,\n        fat: 25.0,\n        carbs: 51,\n        protein: 4.9,\n        sodium: 326,\n        calcium: \"2%\",\n        iron: \"22%\"\n      }, {\n        name: \"KitKat\",\n        calories: 518,\n        fat: 26.0,\n        carbs: 65,\n        protein: 7,\n        sodium: 54,\n        calcium: \"12%\",\n        iron: \"6%\"\n      }]\n    };\n  },\n  methods: {\n    // emulate fetching data from server\n    addRow: function () {\n      var _this = this;\n\n      this.loading = true;\n      setTimeout(function () {\n        var index = Math.floor(Math.random() * (_this.data.length + 1)),\n            row = _this.original[Math.floor(Math.random() * _this.original.length)];\n\n        if (_this.data.length === 0) {\n          _this.rowCount = 0;\n        }\n\n        row.id = ++_this.rowCount;\n        var addRow = (0, _objectSpread2.default)({}, row); // extend({}, row, { name: `${row.name} (${row.__count})` })\n\n        _this.data = (0, _toConsumableArray2.default)(_this.data.slice(0, index)).concat([addRow], (0, _toConsumableArray2.default)(_this.data.slice(index)));\n        _this.loading = false;\n      }, 500);\n    },\n    removeRow: function () {\n      var _this2 = this;\n\n      this.loading = true;\n      setTimeout(function () {\n        var index = Math.floor(Math.random() * _this2.data.length);\n        _this2.data = (0, _toConsumableArray2.default)(_this2.data.slice(0, index)).concat((0, _toConsumableArray2.default)(_this2.data.slice(index + 1)));\n        _this2.loading = false;\n      }, 500);\n    }\n  }\n});","map":{"version":3,"sources":["/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar/client/page/ListItem.vue"],"names":["module","exportDefault","data","loading","filter","rowCount","columns","name","required","label","align","field","row","format","val","sortable","sort","a","b","parseInt","id","calories","fat","carbs","protein","sodium","calcium","iron","original","methods","addRow","setTimeout","index","Math","floor","random","length","slice","removeRow"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  data() {\n    return {\n      loading: false,\n      filter: \"\",\n      rowCount: 10,\n      columns: [\n        {\n          name: \"desc\",\n          required: true,\n          label: \"Dessert (100g serving)\",\n          align: \"left\",\n          field: row => row.name,\n          format: val => `${val}`,\n          sortable: true\n        },\n        {\n          name: \"calories\",\n          align: \"center\",\n          label: \"Calories\",\n          field: \"calories\",\n          sortable: true\n        },\n        { name: \"fat\", label: \"Fat (g)\", field: \"fat\", sortable: true },\n        { name: \"carbs\", label: \"Carbs (g)\", field: \"carbs\" },\n        { name: \"protein\", label: \"Protein (g)\", field: \"protein\" },\n        { name: \"sodium\", label: \"Sodium (mg)\", field: \"sodium\" },\n        {\n          name: \"calcium\",\n          label: \"Calcium (%)\",\n          field: \"calcium\",\n          sortable: true,\n          sort: (a, b) => parseInt(a, 10) - parseInt(b, 10)\n        },\n        {\n          name: \"iron\",\n          label: \"Iron (%)\",\n          field: \"iron\",\n          sortable: true,\n          sort: (a, b) => parseInt(a, 10) - parseInt(b, 10)\n        }\n      ],\n      data: [\n        {\n          id: 1,\n          name: \"Frozen Yogurt\",\n          calories: 159,\n          fat: 6.0,\n          carbs: 24,\n          protein: 4.0,\n          sodium: 87,\n          calcium: \"14%\",\n          iron: \"1%\"\n        },\n        {\n          id: 2,\n          name: \"Ice cream sandwich\",\n          calories: 237,\n          fat: 9.0,\n          carbs: 37,\n          protein: 4.3,\n          sodium: 129,\n          calcium: \"8%\",\n          iron: \"1%\"\n        },\n        {\n          id: 3,\n          name: \"Eclair\",\n          calories: 262,\n          fat: 16.0,\n          carbs: 23,\n          protein: 6.0,\n          sodium: 337,\n          calcium: \"6%\",\n          iron: \"7%\"\n        },\n        {\n          id: 4,\n          name: \"Cupcake\",\n          calories: 305,\n          fat: 3.7,\n          carbs: 67,\n          protein: 4.3,\n          sodium: 413,\n          calcium: \"3%\",\n          iron: \"8%\"\n        },\n        {\n          id: 5,\n          name: \"Gingerbread\",\n          calories: 356,\n          fat: 16.0,\n          carbs: 49,\n          protein: 3.9,\n          sodium: 327,\n          calcium: \"7%\",\n          iron: \"16%\"\n        },\n        {\n          id: 6,\n          name: \"Jelly bean\",\n          calories: 375,\n          fat: 0.0,\n          carbs: 94,\n          protein: 0.0,\n          sodium: 50,\n          calcium: \"0%\",\n          iron: \"0%\"\n        },\n        {\n          id: 7,\n          name: \"Lollipop\",\n          calories: 392,\n          fat: 0.2,\n          carbs: 98,\n          protein: 0,\n          sodium: 38,\n          calcium: \"0%\",\n          iron: \"2%\"\n        },\n        {\n          id: 8,\n          name: \"Honeycomb\",\n          calories: 408,\n          fat: 3.2,\n          carbs: 87,\n          protein: 6.5,\n          sodium: 562,\n          calcium: \"0%\",\n          iron: \"45%\"\n        },\n        {\n          id: 9,\n          name: \"Donut\",\n          calories: 452,\n          fat: 25.0,\n          carbs: 51,\n          protein: 4.9,\n          sodium: 326,\n          calcium: \"2%\",\n          iron: \"22%\"\n        },\n        {\n          id: 10,\n          name: \"KitKat\",\n          calories: 518,\n          fat: 26.0,\n          carbs: 65,\n          protein: 7,\n          sodium: 54,\n          calcium: \"12%\",\n          iron: \"6%\"\n        }\n      ],\n      original: [\n        {\n          name: \"Frozen Yogurt\",\n          calories: 159,\n          fat: 6.0,\n          carbs: 24,\n          protein: 4.0,\n          sodium: 87,\n          calcium: \"14%\",\n          iron: \"1%\"\n        },\n        {\n          name: \"Ice cream sandwich\",\n          calories: 237,\n          fat: 9.0,\n          carbs: 37,\n          protein: 4.3,\n          sodium: 129,\n          calcium: \"8%\",\n          iron: \"1%\"\n        },\n        {\n          name: \"Eclair\",\n          calories: 262,\n          fat: 16.0,\n          carbs: 23,\n          protein: 6.0,\n          sodium: 337,\n          calcium: \"6%\",\n          iron: \"7%\"\n        },\n        {\n          name: \"Cupcake\",\n          calories: 305,\n          fat: 3.7,\n          carbs: 67,\n          protein: 4.3,\n          sodium: 413,\n          calcium: \"3%\",\n          iron: \"8%\"\n        },\n        {\n          name: \"Gingerbread\",\n          calories: 356,\n          fat: 16.0,\n          carbs: 49,\n          protein: 3.9,\n          sodium: 327,\n          calcium: \"7%\",\n          iron: \"16%\"\n        },\n        {\n          name: \"Jelly bean\",\n          calories: 375,\n          fat: 0.0,\n          carbs: 94,\n          protein: 0.0,\n          sodium: 50,\n          calcium: \"0%\",\n          iron: \"0%\"\n        },\n        {\n          name: \"Lollipop\",\n          calories: 392,\n          fat: 0.2,\n          carbs: 98,\n          protein: 0,\n          sodium: 38,\n          calcium: \"0%\",\n          iron: \"2%\"\n        },\n        {\n          name: \"Honeycomb\",\n          calories: 408,\n          fat: 3.2,\n          carbs: 87,\n          protein: 6.5,\n          sodium: 562,\n          calcium: \"0%\",\n          iron: \"45%\"\n        },\n        {\n          name: \"Donut\",\n          calories: 452,\n          fat: 25.0,\n          carbs: 51,\n          protein: 4.9,\n          sodium: 326,\n          calcium: \"2%\",\n          iron: \"22%\"\n        },\n        {\n          name: \"KitKat\",\n          calories: 518,\n          fat: 26.0,\n          carbs: 65,\n          protein: 7,\n          sodium: 54,\n          calcium: \"12%\",\n          iron: \"6%\"\n        }\n      ]\n    };\n  },\n  methods: {\n    // emulate fetching data from server\n    addRow() {\n      this.loading = true;\n      setTimeout(() => {\n        const index = Math.floor(Math.random() * (this.data.length + 1)),\n          row = this.original[Math.floor(Math.random() * this.original.length)];\n        if (this.data.length === 0) {\n          this.rowCount = 0;\n        }\n        row.id = ++this.rowCount;\n        const addRow = { ...row }; // extend({}, row, { name: `${row.name} (${row.__count})` })\n        this.data = [\n          ...this.data.slice(0, index),\n          addRow,\n          ...this.data.slice(index)\n        ];\n        this.loading = false;\n      }, 500);\n    },\n    removeRow() {\n      this.loading = true;\n      setTimeout(() => {\n        const index = Math.floor(Math.random() * this.data.length);\n        this.data = [\n          ...this.data.slice(0, index),\n          ...this.data.slice(index + 1)\n        ];\n        this.loading = false;\n      }, 500);\n    }\n  }\n};\n"]},"sourceType":"script","hash":"f677966702ce17d06820cce7c76fc1b1312dc722"}
