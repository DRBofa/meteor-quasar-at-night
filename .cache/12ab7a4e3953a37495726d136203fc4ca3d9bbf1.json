{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar (copy)/node_modules/vue-excel-export/VueComment.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar (copy)/node_modules/vue-excel-export/VueComment.vue","filename":"/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar (copy)/node_modules/vue-excel-export/VueComment.vue","passPerPreset":false,"envName":"development","cwd":"/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar (copy)","root":"/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar (copy)","generatorOpts":{"filename":"/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar (copy)/node_modules/vue-excel-export/VueComment.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar (copy)/node_modules/vue-excel-export/VueComment.vue"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar download;\nmodule.link(\"browser-downloads\", {\n  \"default\": function (v) {\n    download = v;\n  }\n}, 0);\nmodule.exportDefault({\n  name: 'export-excel',\n  props: {\n    // mime type [xls, csv]\n    type: {\n      type: String,\n      \"default\": \"xls\"\n    },\n    // Json to download\n    data: {\n      type: Array,\n      required: false,\n      \"default\": null\n    },\n    // fields inside the Json Object that you want to export\n    // if no given, all the properties in the Json are exported\n    fields: {\n      type: Object,\n      required: false\n    },\n    // this prop is used to fix the problem with other components that use the\n    // variable fields, like vee-validate. exportFields works exactly like fields\n    exportFields: {\n      type: Object,\n      required: false\n    },\n    // Use as fallback when the row has no field values\n    defaultValue: {\n      type: String,\n      required: false,\n      \"default\": \"\"\n    },\n    // Title(s) for the data, could be a string or an array of strings (multiple titles)\n    title: {\n      \"default\": null\n    },\n    // Footer(s) for the data, could be a string or an array of strings (multiple footers)\n    footer: {\n      \"default\": null\n    },\n    // filename to export\n    name: {\n      type: String,\n      \"default\": \"data.xls\"\n    },\n    fetch: {\n      type: Function\n    },\n    meta: {\n      type: Array,\n      \"default\": function () {\n        return [];\n      }\n    },\n    worksheet: {\n      type: String,\n      \"default\": \"Sheet1\"\n    },\n    //event before generate was called\n    beforeGenerate: {\n      type: Function\n    },\n    //event before download pops up\n    beforeFinish: {\n      type: Function\n    }\n  },\n  computed: {\n    // unique identifier\n    idName: function () {\n      var now = new Date().getTime();\n      return \"export_\" + now;\n    },\n    downloadFields: function () {\n      if (this.fields !== undefined) return this.fields;\n      if (this.exportFields !== undefined) return this.exportFields;\n    }\n  },\n  methods: {\n    generate: function _callee() {\n      var data, json;\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof this.beforeGenerate === 'function')) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return _regenerator.default.awrap(this.beforeGenerate());\n\n            case 3:\n              data = this.data;\n\n              if (!(typeof this.fetch === 'function' || !data)) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 7;\n              return _regenerator.default.awrap(this.fetch());\n\n            case 7:\n              data = _context.sent;\n\n            case 8:\n              if (!(!data || !data.length)) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 10:\n              json = this.getProcessedJson(data, this.downloadFields);\n\n              if (!(this.type === \"html\")) {\n                _context.next = 15;\n                break;\n              }\n\n              return _context.abrupt(\"return\", this.export(this.jsonToXLS(json), this.name.replace(\".xls\", \".html\"), \"text/html\"));\n\n            case 15:\n              if (!(this.type === \"csv\")) {\n                _context.next = 17;\n                break;\n              }\n\n              return _context.abrupt(\"return\", this.export(this.jsonToCSV(json), this.name.replace(\".xls\", \".csv\"), \"application/csv\"));\n\n            case 17:\n              return _context.abrupt(\"return\", this.export(this.jsonToXLS(json), this.name, \"application/vnd.ms-excel\"));\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    },\n\n    /*\n        Use downloadjs to generate the download link\n        */\n    \"export\": function _callee2(data, filename, mime) {\n      var blob;\n      return _regenerator.default.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              blob = this.base64ToBlob(data, mime);\n\n              if (!(typeof this.beforeFinish === 'function')) {\n                _context2.next = 4;\n                break;\n              }\n\n              _context2.next = 4;\n              return _regenerator.default.awrap(this.beforeFinish());\n\n            case 4:\n              download(blob, filename, mime);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    },\n\n    /*\n        jsonToXLS\n        ---------------\n        Transform json data into an xml document with MS Excel format, sadly\n        it shows a prompt when it opens, that is a default behavior for\n        Microsoft office and cannot be avoided. It's recommended to use CSV format instead.\n        */\n    jsonToXLS: function (data) {\n      var xlsTemp = '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content=\"Microsoft Excel 11\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>br {mso-data-placement: same-cell;}</style></head><body><table>${table}</table></body></html>';\n      var xlsData = \"<thead>\";\n      var colspan = Object.keys(data[0]).length;\n\n      var _self = this; //Header\n\n\n      if (this.title != null) {\n        xlsData += this.parseExtraData(this.title, '<tr><th colspan=\"' + colspan + '\">${data}</th></tr>');\n      } //Fields\n\n\n      xlsData += \"<tr>\";\n\n      for (var key in data[0]) {\n        xlsData += \"<th>\" + key + \"</th>\";\n      }\n\n      xlsData += \"</tr>\";\n      xlsData += \"</thead>\"; //Data\n\n      xlsData += \"<tbody>\";\n      data.map(function (item, index) {\n        xlsData += \"<tr>\";\n\n        for (var _key in item) {\n          xlsData += \"<td>\" + _self.valueReformattedForMultilines(item[_key]) + \"</td>\";\n        }\n\n        xlsData += \"</tr>\";\n      });\n      xlsData += \"</tbody>\"; //Footer\n\n      if (this.footer != null) {\n        xlsData += \"<tfoot>\";\n        xlsData += this.parseExtraData(this.footer, '<tr><td colspan=\"' + colspan + '\">${data}</td></tr>');\n        xlsData += \"</tfoot>\";\n      }\n\n      return xlsTemp.replace(\"${table}\", xlsData).replace(\"${worksheet}\", this.worksheet);\n    },\n\n    /*\n        jsonToCSV\n        ---------------\n        Transform json data into an CSV file.\n        */\n    jsonToCSV: function (data) {\n      var csvData = []; //Header\n\n      if (this.title != null) {\n        csvData.push(this.parseExtraData(this.title, \"${data}\\r\\n\"));\n      } //Fields\n\n\n      for (var key in data[0]) {\n        csvData.push(key);\n        csvData.push(\",\");\n      }\n\n      csvData.pop();\n      csvData.push(\"\\r\\n\"); //Data\n\n      data.map(function (item) {\n        for (var _key2 in item) {\n          var escapedCSV = '=\\\"' + item[_key2] + '\\\"'; // cast Numbers to string\n\n          if (escapedCSV.match(/[,\"\\n]/)) {\n            escapedCSV = '\"' + escapedCSV.replace(/\\\"/g, '\"\"') + '\"';\n          }\n\n          csvData.push(escapedCSV);\n          csvData.push(\",\");\n        }\n\n        csvData.pop();\n        csvData.push(\"\\r\\n\");\n      }); //Footer\n\n      if (this.footer != null) {\n        csvData.push(this.parseExtraData(this.footer, \"${data}\\r\\n\"));\n      }\n\n      return csvData.join(\"\");\n    },\n\n    /*\n        getProcessedJson\n        ---------------\n        Get only the data to export, if no fields are set return all the data\n        */\n    getProcessedJson: function (data, header) {\n      var keys = this.getKeys(data, header);\n      var newData = [];\n\n      var _self = this;\n\n      data.map(function (item, index) {\n        var newItem = {};\n\n        for (var label in keys) {\n          var property = keys[label];\n          newItem[label] = _self.getValue(property, item);\n        }\n\n        newData.push(newItem);\n      });\n      return newData;\n    },\n    getKeys: function (data, header) {\n      if (header) {\n        return header;\n      }\n\n      var keys = {};\n\n      for (var key in data[0]) {\n        keys[key] = key;\n      }\n\n      return keys;\n    },\n\n    /*\n        parseExtraData\n        ---------------\n        Parse title and footer attribute to the csv format\n        */\n    parseExtraData: function (extraData, format) {\n      var parseData = \"\";\n\n      if (Array.isArray(extraData)) {\n        for (var i = 0; i < extraData.length; i++) {\n          parseData += format.replace(\"${data}\", extraData[i]);\n        }\n      } else {\n        parseData += format.replace(\"${data}\", extraData);\n      }\n\n      return parseData;\n    },\n    getValue: function (key, item) {\n      var field = (0, _typeof2.default)(key) !== \"object\" ? key : key.field;\n      var indexes = typeof field !== \"string\" ? [] : field.split(\".\");\n      var value = this.defaultValue;\n      if (!field) value = item;else if (indexes.length > 1) value = this.getValueFromNestedItem(item, indexes);else value = this.parseValue(item[field]);\n      if (key.hasOwnProperty('callback')) value = this.getValueFromCallback(value, key.callback);\n      return value;\n    },\n\n    /*\n    convert values with newline \\n characters into <br/>\n    */\n    valueReformattedForMultilines: function (value) {\n      if (typeof value == \"string\") return value.replace(/\\n/ig, \"<br/>\");else return value;\n    },\n    getValueFromNestedItem: function (item, indexes) {\n      var nestedItem = item;\n\n      for (var _iterator = indexes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var _index = _ref;\n        if (nestedItem) nestedItem = nestedItem[_index];\n      }\n\n      return this.parseValue(nestedItem);\n    },\n    getValueFromCallback: function (item, callback) {\n      if (typeof callback !== \"function\") return this.defaultValue;\n      var value = callback(item);\n      return this.parseValue(value);\n    },\n    parseValue: function (value) {\n      return value || value === 0 || typeof value === 'boolean' ? value : this.defaultValue;\n    },\n    base64ToBlob: function (data, mime) {\n      var base64 = window.btoa(window.unescape(encodeURIComponent(data)));\n      var bstr = atob(base64);\n      var n = bstr.length;\n      var u8arr = new Uint8ClampedArray(n);\n\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n      }\n\n      return new Blob([u8arr], {\n        type: mime\n      });\n    }\n  } // end methods\n\n});","map":{"version":3,"sources":["/home/bona/Desktop/Learn Vuejs Get start/Project/meteor+quasar (copy)/node_modules/vue-excel-export/VueComment.vue"],"names":["download","module","link","v","exportDefault","name","props","type","String","data","Array","required","fields","Object","exportFields","defaultValue","title","footer","fetch","Function","meta","worksheet","beforeGenerate","beforeFinish","computed","idName","now","Date","getTime","downloadFields","undefined","methods","generate","length","json","getProcessedJson","export","jsonToXLS","replace","jsonToCSV","filename","mime","blob","base64ToBlob","xlsTemp","xlsData","colspan","keys","_self","parseExtraData","key","map","item","index","valueReformattedForMultilines","csvData","push","pop","escapedCSV","match","join","header","getKeys","newData","newItem","label","property","getValue","extraData","format","parseData","isArray","i","field","indexes","split","value","getValueFromNestedItem","parseValue","hasOwnProperty","getValueFromCallback","callback","nestedItem","base64","window","btoa","unescape","encodeURIComponent","bstr","atob","n","u8arr","Uint8ClampedArray","charCodeAt","Blob"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport download from \"browser-downloads\";\n\nexport default {\n    name: 'export-excel',\n    props: {\n        // mime type [xls, csv]\n        type: {\n            type: String,\n            default: \"xls\"\n        },\n        // Json to download\n        data: {\n            type: Array,\n            required: false,\n            default: null\n        },\n        // fields inside the Json Object that you want to export\n        // if no given, all the properties in the Json are exported\n        fields: {\n            type: Object,\n            required: false\n        },\n        // this prop is used to fix the problem with other components that use the\n        // variable fields, like vee-validate. exportFields works exactly like fields\n        exportFields: {\n            type: Object,\n            required: false\n        },\n        // Use as fallback when the row has no field values\n        defaultValue: {\n            type: String,\n            required: false,\n            default: \"\"\n        },\n        // Title(s) for the data, could be a string or an array of strings (multiple titles)\n        title: {\n            default: null\n        },\n        // Footer(s) for the data, could be a string or an array of strings (multiple footers)\n        footer: {\n            default: null\n        },\n        // filename to export\n        name: {\n            type: String,\n            default: \"data.xls\"\n        },\n        fetch: {\n            type: Function,\n        },\n        meta: {\n            type: Array,\n            default: () => []\n        },\n        worksheet: {\n            type: String,\n            default: \"Sheet1\"\n        },\n        //event before generate was called\n        beforeGenerate: {\n            type: Function,\n        },\n        //event before download pops up\n        beforeFinish: {\n            type: Function,\n        },\n    },\n    computed: {\n        // unique identifier\n        idName() {\n            var now = new Date().getTime();\n            return \"export_\" + now;\n        },\n\n        downloadFields() {\n            if (this.fields !== undefined) return this.fields;\n\n            if (this.exportFields !== undefined) return this.exportFields;\n        }\n    },\n    methods: {\n        async generate() {\n            if (typeof this.beforeGenerate === 'function') {\n                await this.beforeGenerate();\n            }\n            let data = this.data;\n            if (typeof this.fetch === 'function' || !data)\n                data = await this.fetch();\n\n            if (!data || !data.length) {\n                return;\n            }\n\n            let json = this.getProcessedJson(data, this.downloadFields);\n            if (this.type === \"html\") {\n                // this is mainly for testing\n                return this.export(\n                    this.jsonToXLS(json),\n                    this.name.replace(\".xls\", \".html\"),\n                    \"text/html\"\n                );\n            } else if (this.type === \"csv\") {\n                return this.export(\n                    this.jsonToCSV(json),\n                    this.name.replace(\".xls\", \".csv\"),\n                    \"application/csv\"\n                );\n            }\n            return this.export(\n                this.jsonToXLS(json),\n                this.name,\n                \"application/vnd.ms-excel\"\n            );\n        },\n        /*\n            Use downloadjs to generate the download link\n            */\n        export: async function (data, filename, mime) {\n            let blob = this.base64ToBlob(data, mime);\n            if (typeof this.beforeFinish === 'function')\n                await this.beforeFinish();\n            download(blob, filename, mime);\n        },\n        /*\n            jsonToXLS\n            ---------------\n            Transform json data into an xml document with MS Excel format, sadly\n            it shows a prompt when it opens, that is a default behavior for\n            Microsoft office and cannot be avoided. It's recommended to use CSV format instead.\n            */\n        jsonToXLS(data) {\n            let xlsTemp =\n                '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content=\"Microsoft Excel 11\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>br {mso-data-placement: same-cell;}</style></head><body><table>${table}</table></body></html>';\n            let xlsData = \"<thead>\";\n            const colspan = Object.keys(data[0]).length;\n            let _self = this;\n\n            //Header\n            if (this.title != null) {\n                xlsData += this.parseExtraData(\n                    this.title,\n                    '<tr><th colspan=\"' + colspan + '\">${data}</th></tr>'\n                );\n            }\n\n            //Fields\n            xlsData += \"<tr>\";\n            for (let key in data[0]) {\n                xlsData += \"<th>\" + key + \"</th>\";\n            }\n            xlsData += \"</tr>\";\n            xlsData += \"</thead>\";\n\n            //Data\n            xlsData += \"<tbody>\";\n            data.map(function (item, index) {\n                xlsData += \"<tr>\";\n                for (let key in item) {\n                    xlsData += \"<td>\" + _self.valueReformattedForMultilines(item[key]) + \"</td>\";\n                }\n                xlsData += \"</tr>\";\n            });\n            xlsData += \"</tbody>\";\n\n            //Footer\n            if (this.footer != null) {\n                xlsData += \"<tfoot>\";\n                xlsData += this.parseExtraData(\n                    this.footer,\n                    '<tr><td colspan=\"' + colspan + '\">${data}</td></tr>'\n                );\n                xlsData += \"</tfoot>\";\n            }\n\n            return xlsTemp.replace(\"${table}\", xlsData).replace(\"${worksheet}\", this.worksheet);\n        },\n        /*\n            jsonToCSV\n            ---------------\n            Transform json data into an CSV file.\n            */\n        jsonToCSV(data) {\n            var csvData = [];\n            //Header\n            if (this.title != null) {\n                csvData.push(this.parseExtraData(this.title, \"${data}\\r\\n\"));\n            }\n            //Fields\n            for (let key in data[0]) {\n                csvData.push(key);\n                csvData.push(\",\");\n            }\n            csvData.pop();\n            csvData.push(\"\\r\\n\");\n            //Data\n            data.map(function (item) {\n                for (let key in item) {\n                    let escapedCSV = '=\\\"' + item[key] + '\\\"'; // cast Numbers to string\n                    if (escapedCSV.match(/[,\"\\n]/)) {\n                        escapedCSV = '\"' + escapedCSV.replace(/\\\"/g, '\"\"') + '\"';\n                    }\n                    csvData.push(escapedCSV);\n                    csvData.push(\",\");\n                }\n                csvData.pop();\n                csvData.push(\"\\r\\n\");\n            });\n            //Footer\n            if (this.footer != null) {\n                csvData.push(this.parseExtraData(this.footer, \"${data}\\r\\n\"));\n            }\n            return csvData.join(\"\");\n        },\n        /*\n            getProcessedJson\n            ---------------\n            Get only the data to export, if no fields are set return all the data\n            */\n        getProcessedJson(data, header) {\n            let keys = this.getKeys(data, header);\n            let newData = [];\n            let _self = this;\n            data.map(function (item, index) {\n                let newItem = {};\n                for (let label in keys) {\n                    let property = keys[label];\n                    newItem[label] = _self.getValue(property, item);\n                }\n                newData.push(newItem);\n            });\n\n            return newData;\n        },\n        getKeys(data, header) {\n            if (header) {\n                return header;\n            }\n\n            let keys = {};\n            for (let key in data[0]) {\n                keys[key] = key;\n            }\n            return keys;\n        },\n        /*\n            parseExtraData\n            ---------------\n            Parse title and footer attribute to the csv format\n            */\n        parseExtraData(extraData, format) {\n            let parseData = \"\";\n            if (Array.isArray(extraData)) {\n                for (var i = 0; i < extraData.length; i++) {\n                    parseData += format.replace(\"${data}\", extraData[i]);\n                }\n            } else {\n                parseData += format.replace(\"${data}\", extraData);\n            }\n            return parseData;\n        },\n\n        getValue(key, item) {\n            const field = typeof key !== \"object\" ? key : key.field;\n            let indexes = typeof field !== \"string\" ? [] : field.split(\".\");\n            let value = this.defaultValue;\n\n            if (!field)\n                value = item;\n            else if (indexes.length > 1)\n                value = this.getValueFromNestedItem(item, indexes);\n            else\n                value = this.parseValue(item[field]);\n\n            if (key.hasOwnProperty('callback'))\n                value = this.getValueFromCallback(value, key.callback);\n\n            return value;\n        },\n\n        /*\n        convert values with newline \\n characters into <br/>\n        */\n        valueReformattedForMultilines(value) {\n            if (typeof (value) == \"string\") return (value.replace(/\\n/ig, \"<br/>\"));\n            else return (value);\n        },\n\n        getValueFromNestedItem(item, indexes) {\n            let nestedItem = item;\n            for (let index of indexes) {\n                if (nestedItem)\n                    nestedItem = nestedItem[index];\n            }\n            return this.parseValue(nestedItem);\n        },\n\n        getValueFromCallback(item, callback) {\n            if (typeof callback !== \"function\")\n                return this.defaultValue\n            const value = callback(item);\n            return this.parseValue(value);\n        },\n        parseValue(value) {\n            return value || value === 0 || typeof value === 'boolean'\n                ? value\n                : this.defaultValue;\n        },\n        base64ToBlob(data, mime) {\n            let base64 = window.btoa(window.unescape(encodeURIComponent(data)));\n            let bstr = atob(base64);\n            let n = bstr.length;\n            let u8arr = new Uint8ClampedArray(n);\n            while (n--) {\n                u8arr[n] = bstr.charCodeAt(n);\n            }\n            return new Blob([u8arr], {type: mime});\n        }\n    } // end methods\n};\n"]},"sourceType":"script","hash":"12ab7a4e3953a37495726d136203fc4ca3d9bbf1"}
